---
alwaysApply: true
---

safeMode: true

# High-level execution policy
workflow:
  phases:
    - name: ANALYZE
      must:
        - "Locate files before editing (grep/ls). Show matched paths."
        - "For DB claims, run psql \\d+ <table> and paste output."
        - "For API claims, call local endpoints and paste response (redact tokens)."
        - "For frontend claims, show component/hook paths and imports."
      outputSections: ["FINDINGS", "RISKS", "QUESTIONS_OR_ASSUMPTIONS"]
    - name: PLAN
      must:
        - "List concrete changes as a checklist; scope minimal blast radius."
        - "Show exact files to touch and why."
        - "Declare stop conditions and rollback plan."
      outputSections: ["PLAN", "AFFECTED_FILES", "STOP_CONDITIONS", "ROLLBACK"]
    - name: APPLY
      must:
        - "Implement only items in PLAN. Do not expand scope."
        - "Show minimal diffs (old vs new) for each file edited."
        - "Run commands exactly as listed in PLAN."
      outputSections: ["CHANGES (diffs)", "COMMANDS_RUN"]
    - name: VERIFY
      must:
        - "Prove success with real outputs (tests, curl, \d)."
        - "For failures, produce Failure Report and STOP."
      outputSections: ["PROOF", "FOLLOWUPS"]

stopConditions:
  - "Auth endpoints return 401 for valid tokens"
  - "organizationId is null/undefined in any guarded request"
  - "DB schema mismatch (entity vs \\d+) without migration plan"
  - "Build/test errors"
  - "Any endpoint p95 > 500ms on local run (measured)"
onStop:
  - "Produce Failure Report (template below) and halt further edits."

# Security & Git hygiene
git:
  branch: "cursor/${taskSlug}"
  never:
    - "commit/push .env* *.pem *.key secrets/"
    - "print secret values in logs (use REDACTED)"
  push:
    requirePassing:
      - "npm run build"
      - "npm test - if present"
  commitMessageTemplate: |
    {{type}}: {{subject}}

    Scope: {{area}}
    Why: {{why}}
    What: {{what}}
    Tests: {{tests}}
    Risk: {{risk}}
    BreakingChange: {{breaking}}

# DB rules (Zephix-specific)
db:
  verifySchema:
    must:
      - "ALWAYS run: psql $DATABASE_URL -c \"\\d+ <table>\" and paste output"
      - "Show entity decorators side-by-side with DB columns"
      - "Use a comparison table: Column | Database | Entity | Status"
  constraints:
    - "Unique: name+workspace_id; task_number+project_id"
    - "Checks: allocation_percentage BETWEEN 0 AND 150; hours_per_week 0..168"
  tenancy:
    - "ALWAYS filter by organization_id in queries/services"
  migrations:
    - "Write forward-only migrations; no destructive ops without approval"
  performanceBudgets:
    p95ms:
      conflicts: 200
      heat_map: 500
      cross_project_alloc: 300
    verifyWith: "EXPLAIN ANALYZE and time curl; paste results"
  evidenceFirst: true

# Backend (NestJS) rules
backend:
  jwt:
    - "Single JwtModule (AppModule async using ConfigService)."
    - "Sign with payload {sub,email,organizationId,roles} via config.jwt.secret."
    - "JwtStrategy validates payload.sub; returns {id,email,organizationId,roles}."
    - "Dev-only TestModule route /api/test-auth/me using ONLY JwtAuthGuard for isolation."
  filters:
    - "AllExceptionsFilter @Catch(HttpException) only."
    - "DatabaseExceptionFilter @Catch(QueryFailedError) maps 23505→409, 23514→422, 23503→400."
    - "Register DB filter before all-catch; show order in main.ts."
  dtoTransform:
    - "Expose camelCase to frontend using class-transformer; map snake_case → camelCase."
    - "Return ApiEnvelope<T> = { data, meta? } consistently."
  guards:
    - "Use 401 only for auth failures; use 403 for org/tenant violations (with clear message)."
  tests:
    - "Unit tests for DatabaseExceptionFilter (9/9) must pass."
    - "Add dev-only routes behind NODE_ENV !== 'production'."

# Frontend (React + Vite) rules
frontend:
  reactQuery:
    - "Use TanStack Query v5 object syntax only."
    - "Query keys: ['project', id], ['tasks', 'byProject', projectId]."
    - "Provider: add QueryClientProvider + Devtools at app shell."
    - "Invalidate on mutations; optimistic update where sensible."
  apiClient:
    - "Single Axios instance in src/services/api.ts; no duplicate clients."
    - "Unwrap ApiEnvelope consistently; map errors to user-friendly messages."
  scopeControl:
    - "Refactor ONE path at a time; show before/after diff."
    - "Do not change shared services unless proving no regressions (grep all usages + run dev)."
  stateConsistency:
    - "After any mutation: state store, react-query cache, and UI must align; show verification logs once."

# Zephix domain requirements
domain:
  allocation:
    - "Store percentage, not hours; auto-adjust on timeline changes."
    - "Validate total percentage across all projects for a resource."
    - "Threshold order: Individual > Group > Org (never exceed without approval trail)."
    - "Return conflicts with evidence (breakdown + dates + suggestions)."

# Required outputs (always paste)
evidence:
  database: "psql \\d output"
  api: "curl responses (redacted)"
  build: "last 10 lines of build/test output"
  performance: "time curl + EXPLAIN if > budget"

# Failure report template
failureTemplate: |
  ### Failure Report
  **Attempted**: ...
  **Expected**: ...
  **Actual**: ...
  **Error**: (exact)
  **Debug Steps**: ...
  **Root Cause**: ...
  **Solution**: ...
  **Verification**: (proof pasted)
safeMode: true

# High-level execution policy
workflow:
  phases:
    - name: ANALYZE
      must:
        - "Locate files before editing (grep/ls). Show matched paths."
        - "For DB claims, run psql \\d+ <table> and paste output."
        - "For API claims, call local endpoints and paste response (redact tokens)."
        - "For frontend claims, show component/hook paths and imports."
      outputSections: ["FINDINGS", "RISKS", "QUESTIONS_OR_ASSUMPTIONS"]
    - name: PLAN
      must:
        - "List concrete changes as a checklist; scope minimal blast radius."
        - "Show exact files to touch and why."
        - "Declare stop conditions and rollback plan."
      outputSections: ["PLAN", "AFFECTED_FILES", "STOP_CONDITIONS", "ROLLBACK"]
    - name: APPLY
      must:
        - "Implement only items in PLAN. Do not expand scope."
        - "Show minimal diffs (old vs new) for each file edited."
        - "Run commands exactly as listed in PLAN."
      outputSections: ["CHANGES (diffs)", "COMMANDS_RUN"]
    - name: VERIFY
      must:
        - "Prove success with real outputs (tests, curl, \d)."
        - "For failures, produce Failure Report and STOP."
      outputSections: ["PROOF", "FOLLOWUPS"]

stopConditions:
  - "Auth endpoints return 401 for valid tokens"
  - "organizationId is null/undefined in any guarded request"
  - "DB schema mismatch (entity vs \\d+) without migration plan"
  - "Build/test errors"
  - "Any endpoint p95 > 500ms on local run (measured)"
onStop:
  - "Produce Failure Report (template below) and halt further edits."

# Security & Git hygiene
git:
  branch: "cursor/${taskSlug}"
  never:
    - "commit/push .env* *.pem *.key secrets/"
    - "print secret values in logs (use REDACTED)"
  push:
    requirePassing:
      - "npm run build"
      - "npm test - if present"
  commitMessageTemplate: |
    {{type}}: {{subject}}

    Scope: {{area}}
    Why: {{why}}
    What: {{what}}
    Tests: {{tests}}
    Risk: {{risk}}
    BreakingChange: {{breaking}}

# DB rules (Zephix-specific)
db:
  verifySchema:
    must:
      - "ALWAYS run: psql $DATABASE_URL -c \"\\d+ <table>\" and paste output"
      - "Show entity decorators side-by-side with DB columns"
      - "Use a comparison table: Column | Database | Entity | Status"
  constraints:
    - "Unique: name+workspace_id; task_number+project_id"
    - "Checks: allocation_percentage BETWEEN 0 AND 150; hours_per_week 0..168"
  tenancy:
    - "ALWAYS filter by organization_id in queries/services"
  migrations:
    - "Write forward-only migrations; no destructive ops without approval"
  performanceBudgets:
    p95ms:
      conflicts: 200
      heat_map: 500
      cross_project_alloc: 300
    verifyWith: "EXPLAIN ANALYZE and time curl; paste results"
  evidenceFirst: true

# Backend (NestJS) rules
backend:
  jwt:
    - "Single JwtModule (AppModule async using ConfigService)."
    - "Sign with payload {sub,email,organizationId,roles} via config.jwt.secret."
    - "JwtStrategy validates payload.sub; returns {id,email,organizationId,roles}."
    - "Dev-only TestModule route /api/test-auth/me using ONLY JwtAuthGuard for isolation."
  filters:
    - "AllExceptionsFilter @Catch(HttpException) only."
    - "DatabaseExceptionFilter @Catch(QueryFailedError) maps 23505→409, 23514→422, 23503→400."
    - "Register DB filter before all-catch; show order in main.ts."
  dtoTransform:
    - "Expose camelCase to frontend using class-transformer; map snake_case → camelCase."
    - "Return ApiEnvelope<T> = { data, meta? } consistently."
  guards:
    - "Use 401 only for auth failures; use 403 for org/tenant violations (with clear message)."
  tests:
    - "Unit tests for DatabaseExceptionFilter (9/9) must pass."
    - "Add dev-only routes behind NODE_ENV !== 'production'."

# Frontend (React + Vite) rules
frontend:
  reactQuery:
    - "Use TanStack Query v5 object syntax only."
    - "Query keys: ['project', id], ['tasks', 'byProject', projectId]."
    - "Provider: add QueryClientProvider + Devtools at app shell."
    - "Invalidate on mutations; optimistic update where sensible."
  apiClient:
    - "Single Axios instance in src/services/api.ts; no duplicate clients."
    - "Unwrap ApiEnvelope consistently; map errors to user-friendly messages."
  scopeControl:
    - "Refactor ONE path at a time; show before/after diff."
    - "Do not change shared services unless proving no regressions (grep all usages + run dev)."
  stateConsistency:
    - "After any mutation: state store, react-query cache, and UI must align; show verification logs once."

# Zephix domain requirements
domain:
  allocation:
    - "Store percentage, not hours; auto-adjust on timeline changes."
    - "Validate total percentage across all projects for a resource."
    - "Threshold order: Individual > Group > Org (never exceed without approval trail)."
    - "Return conflicts with evidence (breakdown + dates + suggestions)."

# Required outputs (always paste)
evidence:
  database: "psql \\d output"
  api: "curl responses (redacted)"
  build: "last 10 lines of build/test output"
  performance: "time curl + EXPLAIN if > budget"

# Failure report template
failureTemplate: |
  ### Failure Report
  **Attempted**: ...
  **Expected**: ...
  **Actual**: ...
  **Error**: (exact)
  **Debug Steps**: ...
  **Root Cause**: ...
  **Solution**: ...
  **Verification**: (proof pasted)
