=== Entity: src/core/modules/organizations/entities/user-organization.entity.ts ===
@Entity('user_organizations')
  @Column('uuid')
  @Column('uuid')
  @Column({
  @Column({ default: true })
  @Column({ type: 'jsonb', default: {} })
  @Column({ type: 'date', nullable: true })
  @Column({ type: 'date', nullable: true })
  @ManyToOne(() => User, { onDelete: 'CASCADE' })
  @JoinColumn({ name: 'userId' })
  @ManyToOne(() => Organization, (org) => org.userOrganizations, {
  @JoinColumn({ name: 'organizationId' })
=== Entity: src/core/modules/organizations/entities/organization.entity.ts ===
@Entity('organizations')
  @Column()
  @Column({ unique: true })
  @Column({ default: 'trial' })
  @Column({ nullable: true })
  @Column({ nullable: true })
  @Column({ nullable: true })
  @Column({ nullable: true })
  @Column({ nullable: true })
  @Column({ type: 'jsonb', default: {} })
  @OneToMany(() => UserOrganization, (userOrg) => userOrg.organization)
=== Entity: src/core/modules/auth/entities/user.entity.ts ===
@Entity('users')
  @Column({ unique: true })
  @Column()
  @Column({ name: 'first_name' })
  @Column({ name: 'last_name' })
  @Column({ default: 'user' })
  @Column({ name: 'organization_id', nullable: true })
  @Column({ name: 'profile_picture', nullable: true })
  @Column({ name: 'is_active', default: true })
  @Column({ name: 'is_email_verified', default: false })
  @Column({ name: 'email_verified_at', type: 'timestamp', nullable: true })
  @Column({ name: 'last_login_at', type: 'timestamp', nullable: true })
  @Column({ nullable: true })
  @Column({ type: 'timestamp', nullable: true })
  @Column({ nullable: true })
  @OneToMany(() => RefreshToken, (refreshToken) => refreshToken.user)
=== Entity: src/core/modules/auth/entities/refresh-token.entity.ts ===
@Entity('refresh_tokens')
  @Column({ unique: true })
  @ManyToOne(() => User, (user) => user.refreshTokens, { onDelete: 'CASCADE' })
  @Column()
  @Column({ default: false })
=== Entity: src/core/modules/projects/entities/project.entity.ts ===
@Entity('projects')
  @Column({ type: 'varchar', length: 255 })
  @Column({ type: 'text', nullable: true })
  @Column({
  @Column({ 
  @Column({ name: 'start_date', type: 'timestamp', nullable: true })
  @Column({ name: 'end_date', type: 'timestamp', nullable: true })
  @Column({ name: 'estimated_end_date', type: 'timestamp', nullable: true })
  @Column({ name: 'organization_id', type: 'uuid' })
  @Column({ name: 'program_id', type: 'uuid', nullable: true })
  @Column({ name: 'project_manager_id', type: 'uuid', nullable: true })
  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: true })
  @Column({ type: 'varchar', length: 50, nullable: true })
  @Column({ name: 'template_id', type: 'uuid', nullable: true })
  @Column({ type: 'varchar', length: 50, nullable: true })
  @Column({ type: 'varchar', length: 100, nullable: true })
  @Column({ type: 'simple-array', nullable: true })
  @Column({ name: 'actual_cost', type: 'decimal', precision: 10, scale: 2, nullable: true })
  @Column({ 
  @Column({ name: 'created_by_id', type: 'uuid', nullable: true })
  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'created_by_id' })
  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'project_manager_id' })
  @ManyToOne(() => Program, program => program.projects, { nullable: true })
  @JoinColumn({ name: 'program_id' })
  @ManyToOne(() => Template, { nullable: true })
  @JoinColumn({ name: 'template_id' })
=== Entity: src/core/modules/projects/entities/task.entity.ts ===
@Entity('tasks')
  @Column()
  @Column({ nullable: true })
  @Column({ name: 'project_id' })
  @Column({ name: 'assigned_to', nullable: true })
  @Column({ type: 'date', nullable: true })
  @Column({ type: 'date', nullable: true })
  @Column({ default: 'pending' })
  @Column({ type: 'jsonb', nullable: true })
  @ManyToOne(() => Project)
  @JoinColumn({ name: 'project_id' })
  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'assigned_to' })
=== Entity: src/core/modules/resources/entities/resource-conflict.entity.ts ===
@Entity('resource_conflicts')
  @Column()
  @Column({ type: 'date' })
  @Column({ type: 'decimal', precision: 5, scale: 2 })
  @Column({ type: 'jsonb' })
  @Column()
  @Column({ default: false })
  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })
  @Column({ type: 'timestamp', nullable: true })
=== Entity: src/core/modules/resources/entities/resource-allocation.entity.ts ===
@Entity('resource_allocations')
  @Column({ name: 'resourceId' })
  @Column({ name: 'projectId' })
  @Column({ name: 'taskId', nullable: true })
  @Column({ name: 'startDate', type: 'date' })
  @Column({ name: 'endDate', type: 'date' })
  @Column({ name: 'allocationPercentage', type: 'numeric', precision: 5, scale: 2 })
  @Column({ name: 'hoursPerDay', default: 8 })
  @Column({ name: 'organization_id', nullable: true })
  @Column({ name: 'updated_at', nullable: true })
=== Entity: src/core/modules/portfolios/entities/portfolio.entity.ts ===
@Entity('portfolios')
  @Column({ name: 'organization_id' })
  @ManyToOne(() => Organization)
  @JoinColumn({ name: 'organization_id' })
  @Column()
  @Column({ nullable: true })
  @Column({ default: 'active' })
  @Column({ name: 'owner_id', nullable: true })
  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'owner_id' })
  @OneToMany(() => Program, program => program.portfolio)
=== Entity: src/core/modules/programs/entities/program.entity.ts ===
@Entity('programs')
  @Column({ name: 'portfolio_id' })
  @ManyToOne(() => Portfolio)
  @JoinColumn({ name: 'portfolio_id' })
  @Column()
  @Column({ nullable: true })
  @Column({ type: 'decimal', precision: 15, scale: 2, nullable: true })
  @Column({ name: 'start_date', nullable: true })
  @Column({ name: 'end_date', nullable: true })
  @Column({ default: 'planning' })
  @OneToMany(() => Project, project => project.program)
=== Entity: src/core/modules/risks/entities/risk.entity.ts ===
@Entity('risks')
  @Column('uuid')
  @Column('uuid')
  @Column({
  @Column({
  @Column({ default: 'identified' })
  @Column('varchar', { length: 255 })
  @Column('text')
  @Column({ type: 'jsonb', nullable: true })
=== Entity: src/core/modules/ai-assistant/entities/ai-token-usage.entity.ts ===
@Entity('ai_token_usage')
  @Column({ name: 'organization_id' })
  @Column({ name: 'user_id' })
  @Column({ type: 'varchar', length: 7 }) // Format: 2025-01
  @Column({ name: 'tokens_used', type: 'integer', default: 0 })
  @Column({ name: 'tokens_limit', type: 'integer' })
  @Column({ name: 'tokens_purchased', type: 'integer', default: 0 })
=== Entity: src/core/modules/ai-assistant/entities/ai-interaction.entity.ts ===
@Entity('ai_interactions')
  @Column({ name: 'user_id' })
  @Column({ name: 'organization_id' })
  @Column({ type: 'text' })
  @Column({ type: 'text' })
  @Column({ name: 'tokens_used', type: 'integer' })
  @Column({ name: 'model_used', default: 'gpt-4' })
  @Column({ name: 'response_time_ms', type: 'integer', nullable: true })
  @Column({ type: 'jsonb', nullable: true })
  @Column({ 
=== Entity: src/modules/templates/entities/template.entity.ts ===
@Entity('templates')
  @Column({ type: 'varchar', length: 100 })
  @Column({ 
  @Column({ type: 'text', nullable: true })
  @Column({ type: 'jsonb', default: [] })
  @Column({ type: 'jsonb', default: [] })
  @Column({ type: 'boolean', default: true })
  @Column({ type: 'boolean', default: true })
  @Column({ type: 'uuid', nullable: true })
  @Column({ type: 'int', default: 1 })
  @OneToMany(() => TemplatePhase, phase => phase.template)
  @ManyToOne(() => Organization, { nullable: true })
  @JoinColumn({ name: 'organization_id' })
=== Entity: src/modules/templates/entities/organization-mandatory-kpi.entity.ts ===
@Entity('organization_mandatory_kpis')
  @Column({ type: 'uuid' })
  @Column({ type: 'uuid' })
  @ManyToOne(() => Organization, { onDelete: 'CASCADE' })
  @JoinColumn({ name: 'organization_id' })
  @ManyToOne(() => KpiDefinition, kpi => kpi.organizationKpis, { onDelete: 'CASCADE' })
  @JoinColumn({ name: 'kpi_id' })
=== Entity: src/modules/templates/entities/kpi-definition.entity.ts ===
@Entity('kpi_definitions')
  @Column({ type: 'varchar', length: 100 })
  @Column({ type: 'varchar', length: 50 })
  @Column({ type: 'text', nullable: true })
  @Column({ type: 'varchar', length: 20, nullable: true })
  @Column({ type: 'boolean', default: true })
  @OneToMany(() => OrganizationMandatoryKpi, orgKpi => orgKpi.kpi)
=== Entity: src/modules/templates/entities/template-phase.entity.ts ===
@Entity('template_phases')
  @Column({ type: 'uuid' })
  @Column({ type: 'varchar', length: 100 })
  @Column({ type: 'int' })
  @Column({ type: 'jsonb', default: [] })
  @Column({ type: 'int', nullable: true })
  @ManyToOne(() => Template, template => template.phases, { onDelete: 'CASCADE' })
  @JoinColumn({ name: 'template_id' })
