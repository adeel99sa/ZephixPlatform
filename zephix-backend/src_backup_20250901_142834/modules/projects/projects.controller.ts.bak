import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
  Logger,
} from '@nestjs/common';
import { ProjectsService } from './projects.service';
import { CreateProjectDto } from './dto/create-project.dto';
import { UpdateProjectDto } from './dto/update-project.dto';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { GetTenant, TenantContext } from '../../common/decorators/tenant.decorator';

@Controller('api/projects')
@UseGuards(JwtAuthGuard)
export class ProjectsController {
  private readonly logger = new Logger(ProjectsController.name);

  constructor(private readonly projectsService: ProjectsService) {}

  @Post()
  async create(
    @Body() createProjectDto: CreateProjectDto,
    @GetTenant() tenant: TenantContext,
  ) {
    this.logger.log(`Creating project for user ${tenant.userId} in org ${tenant.organizationId}`);
    return this.projectsService.createProject(
      createProjectDto,
      tenant.organizationId,
      tenant.userId,
    );
  }

  @Get()
  async findAll(
    @GetTenant() tenant: TenantContext,
    @Query('page') page?: string,
    @Query('limit') limit?: string,
    @Query('status') status?: string,
    @Query('search') search?: string,
  ) {
    this.logger.log(`Fetching projects for org ${tenant.organizationId}`);
    
    const options = {
      page: page ? parseInt(page, 10) : 1,
      limit: limit ? parseInt(limit, 10) : 10,
      status,
      search,
    };

    return this.projectsService.findAllProjects(tenant.organizationId, options);
  }

  @Get('stats')
  async getStats(@GetTenant() tenant: TenantContext) {
    this.logger.log(`Fetching project stats for org ${tenant.organizationId}`);
    return this.projectsService.getOrganizationStats(tenant.organizationId);
  }

  @Get(':id')
  async findOne(
    @Param('id') id: string,
    @GetTenant() tenant: TenantContext,
  ) {
    this.logger.log(`Fetching project ${id} for org ${tenant.organizationId}`);
    return this.projectsService.findProjectById(id, tenant.organizationId);
  }

  @Patch(':id')
  async update(
    @Param('id') id: string,
    @Body() updateProjectDto: UpdateProjectDto,
    @GetTenant() tenant: TenantContext,
  ) {
    this.logger.log(`Updating project ${id} for org ${tenant.organizationId}`);
    return this.projectsService.updateProject(
      id,
      updateProjectDto,
      tenant.organizationId,
      tenant.userId,
    );
  }

  @Delete(':id')
  async remove(
    @Param('id') id: string,
    @GetTenant() tenant: TenantContext,
  ) {
    this.logger.log(`Deleting project ${id} for org ${tenant.organizationId}`);
    return this.projectsService.deleteProject(
      id,
      tenant.organizationId,
      tenant.userId,
    );
  }
}

