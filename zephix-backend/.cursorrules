# Zephix Backend Cleanup - STRICT EXECUTION MODE

## ABSOLUTE RULES
1. Never say "COMPLETED âœ…" unless you actually tested and verified
2. If you see an error or issue, FIX IT IMMEDIATELY - do not skip
3. Every curl command must be executed and results shared
4. If ANY test fails, STOP and report the exact failure
5. Do not use phrases like "might", "seems", "appears" - only state facts

## STEP 7: Runtime Test - CORRECTED VERSION

### 7.1 Start backend in separate process
```bash
# Start backend in background
npm run start:dev > backend.log 2>&1 &
echo $! > backend.pid

# Wait 10 seconds for startup
sleep 10

# Check if running
ps -p $(cat backend.pid)
```

If process not found, read backend.log and report error.

### 7.2 Test authentication
```bash
# Test login
curl -v -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"adeel99sa@yahoo.com","password":"ReAdY4wK73967#!@"}'
```

**Expected:** Status 200 or 201 with JSON containing `access_token`
**If 401:** Credentials wrong
**If 404:** Route not registered
**If connection refused:** Backend not running

Save the access_token from response.

### 7.3 Test tasks endpoint
```bash
TOKEN="[paste token from previous step]"

curl -v http://localhost:3000/api/tasks \
  -H "Authorization: Bearer $TOKEN"
```

**Expected:** Status 200 with JSON array
**Share the exact response** - don't summarize

### 7.4 Test projects endpoint
```bash
curl -v http://localhost:3000/api/projects \
  -H "Authorization: Bearer $TOKEN"
```

**Expected:** Status 200 with project list
**Share the exact response**

## STEP 8: Test Project Delete - MANDATORY

### 8.1 Get project ID
From Step 7.4 response, find a project ID. If no projects exist, create one first:

```bash
curl -X POST http://localhost:3000/api/projects \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test Delete Project",
    "description": "Testing CASCADE delete",
    "organizationId": "06b54693-2b4b-4c10-b553-6dea5c5631c9",
    "methodology": "agile"
  }'
```

Save the returned project ID.

### 8.2 Add resource allocation to project
This tests CASCADE delete actually works:

```bash
curl -X POST http://localhost:3000/api/resource-allocations \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "projectId": "[project id from 8.1]",
    "userId": "8f83a908-abe3-4569-94af-8ca0b0629f57",
    "allocationPercentage": 50,
    "startDate": "2025-10-01",
    "endDate": "2025-12-31"
  }'
```

### 8.3 Delete project with allocations
```bash
curl -v -X DELETE http://localhost:3000/api/projects/[project id] \
  -H "Authorization: Bearer $TOKEN"
```

**Expected:** Status 200, project deleted
**If 500:** CASCADE not working, report exact error from backend.log

### 8.4 Verify deletion
```bash
# Try to get deleted project
curl http://localhost:3000/api/projects/[project id] \
  -H "Authorization: Bearer $TOKEN"
```

**Expected:** Status 404 (not found)

### 8.5 Cleanup
```bash
# Stop backend
kill $(cat backend.pid)
rm backend.pid
```

## ISSUE DETECTION RULES

### If you see "duplicate title columns" in Task entity
**STOP and FIX:**

```bash
# Edit src/modules/tasks/entities/task.entity.ts
# Remove any duplicate @Column() decorators
# Ensure each column matches database exactly
```

### If curl returns connection refused
**STOP and CHECK:**

```bash
# Read last 50 lines of logs
tail -50 backend.log

# Check if port 3000 is in use
lsof -i :3000
```

### If any test returns 500 error
**STOP and REPORT:**
1. Exact error from backend.log
2. Which endpoint failed
3. Request body sent

## SUCCESS CRITERIA

You can only report "COMPLETED" when:
- [ ] npm run build succeeds with zero errors
- [ ] Backend starts and stays running for 30 seconds
- [ ] Login returns valid JWT token
- [ ] GET /api/tasks returns 200
- [ ] GET /api/projects returns 200
- [ ] DELETE /api/projects returns 200
- [ ] Deleted project returns 404 on GET
- [ ] No errors in backend.log

If even ONE criterion fails, the cleanup is INCOMPLETE.