# Zephix Backend Cleanup - Step by Step

## CRITICAL RULES
1. Execute steps IN ORDER - do not skip
2. After EACH step, run tests to verify nothing broke
3. If ANY step fails, STOP and report the error
4. Do not make assumptions - follow instructions exactly
5. Create git commit after each major step

## STEP 1: Verify Current State (5 minutes)

### 1.1 Check what files exist
```bash
# List all task-related files
find src/ -type f -name "*task*" -o -name "*work-item*"
```

### 1.2 Expected output should show:
- src/modules/tasks/
- src/modules/work-items/
- src/modules/projects/entities/task.entity.ts (duplicate)
- src/modules/projects/controllers/task.controller.ts (duplicate)
- src/modules/projects/services/task.service.ts (duplicate)

### 1.3 Document current imports
```bash
# Find all files importing Task entity
grep -r "from.*task.entity" src/ --include="*.ts"
grep -r "from.*work-item.entity" src/ --include="*.ts"
```

Save this output to `task-imports.txt` for reference.

## STEP 2: Remove Duplicate Task Files (10 minutes)

### 2.1 Delete duplicate task files in projects module
```bash
# From backend root directory
rm src/modules/projects/entities/task.entity.ts
rm src/modules/projects/entities/task-dependency.entity.ts
rm src/modules/projects/controllers/task.controller.ts
rm src/modules/projects/services/task.service.ts
```

### 2.2 Verify deletion
```bash
ls -la src/modules/projects/entities/
ls -la src/modules/projects/controllers/
ls -la src/modules/projects/services/
```

These directories should NOT contain task-related files anymore.

### 2.3 Git checkpoint
```bash
git add .
git commit -m "Remove duplicate task files from projects module"
```

## STEP 3: Update Projects Module Imports (15 minutes)

### 3.1 Find all imports in projects module
```bash
grep -r "task.entity\|task.controller\|task.service" src/modules/projects/ --include="*.ts"
```

### 3.2 For EACH file found, update imports

**If file imports from projects module:**
```typescript
// OLD (will break now)
import { Task } from '../entities/task.entity';

// NEW (use tasks module instead)
import { Task } from '../../tasks/entities/task.entity';
```

**If file imports Task, update path to:**
```typescript
import { Task } from '../../tasks/entities/task.entity';
import { TaskService } from '../../tasks/tasks.service';
```

### 3.3 Check projects.module.ts
File: `src/modules/projects/projects.module.ts`

Remove any Task-related imports:
```typescript
// Remove these lines if present
import { TaskController } from './controllers/task.controller';
import { TaskService } from './services/task.service';
```

From `@Module` decorator, remove:
```typescript
controllers: [
  ProjectsController,
  // TaskController, // REMOVE THIS
],
providers: [
  ProjectsService,
  // TaskService, // REMOVE THIS
],
```

### 3.4 Compile check
```bash
npm run build
```

If compilation fails, check error message. Common issues:
- Missing imports (add them from tasks module)
- Circular dependencies (remove unused imports)

## STEP 4: Verify Tasks Module is Complete (10 minutes)

### 4.1 Check tasks module structure
```bash
ls -la src/modules/tasks/
```

Must have:
- entities/task.entity.ts
- entities/task-dependency.entity.ts
- tasks.controller.ts
- tasks.service.ts
- tasks.module.ts

### 4.2 Verify Task entity matches database
File: `src/modules/tasks/entities/task.entity.ts`

Must have these @Column decorators with correct database column names:
```typescript
@Entity('tasks')
export class Task {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ name: 'project_id' })
  projectId: string;

  @Column()
  title: string;

  @Column({ type: 'text', nullable: true })
  description: string;

  @Column({ default: 'pending' })
  status: string;

  @Column({ name: 'task_number' })
  taskNumber: string;

  @Column({ name: 'phase_id', nullable: true })
  phaseId: string;

  @Column({ default: 'medium' })
  priority: string;

  @Column({ name: 'estimated_hours', default: 0 })
  estimatedHours: number;

  @Column({ name: 'actual_hours', default: 0 })
  actualHours: number;

  @Column({ name: 'assigned_to', nullable: true })
  assignedTo: string;

  @Column({ name: 'assigned_by', nullable: true })
  assignedBy: string;

  @Column({ name: 'created_by', nullable: true })
  createdBy: string;

  @Column({ name: 'organization_id' })
  organizationId: string;

  @CreateDateColumn({ name: 'created_at' })
  createdAt: Date;

  @UpdateDateColumn({ name: 'updated_at' })
  updatedAt: Date;

  // Relationships
  @ManyToOne(() => Project, project => project.tasks, {
    onDelete: 'CASCADE'
  })
  @JoinColumn({ name: 'project_id' })
  project: Project;

  @ManyToOne(() => Organization)
  @JoinColumn({ name: 'organization_id' })
  organization: Organization;
}
```

### 4.3 Check tasks.controller.ts has CRUD endpoints
File: `src/modules/tasks/tasks.controller.ts`

Must have:
```typescript
@Controller('api/tasks')
@UseGuards(JwtAuthGuard)
export class TasksController {
  
  @Get()
  findAll(@GetTenant() tenant: TenantContext) {
    // Implementation
  }

  @Get(':id')
  findOne(@Param('id') id: string, @GetTenant() tenant: TenantContext) {
    // Implementation
  }

  @Post()
  create(@Body() dto: CreateTaskDto, @GetTenant() tenant: TenantContext) {
    // Implementation
  }

  @Put(':id')
  update(@Param('id') id: string, @Body() dto: UpdateTaskDto, @GetTenant() tenant: TenantContext) {
    // Implementation
  }

  @Delete(':id')
  remove(@Param('id') id: string, @GetTenant() tenant: TenantContext) {
    // Implementation
  }
}
```

## STEP 5: Update App Module (5 minutes)

### 5.1 Check app.module.ts imports
File: `src/app.module.ts`

Ensure TasksModule is imported:
```typescript
import { TasksModule } from './modules/tasks/tasks.module';

@Module({
  imports: [
    // ... other modules
    TasksModule,
    // ... other modules
  ],
})
export class AppModule {}
```

### 5.2 Verify no duplicate imports
```bash
grep -n "TasksModule\|TaskModule" src/app.module.ts
```

Should only appear ONCE in imports array.

## STEP 6: Test Compilation (5 minutes)

### 6.1 Clean build
```bash
rm -rf dist/
npm run build
```

### 6.2 Check for errors
If build succeeds, output should end with:
```
webpack compiled successfully
```

If build fails, read error carefully:
- "Cannot find module" → Missing import, add it
- "Circular dependency" → Remove unused imports
- "Property does not exist" → Entity field mismatch with database

### 6.3 Git checkpoint
```bash
git add .
git commit -m "Backend cleanup complete - tasks module consolidated"
```

## STEP 7: Runtime Test (10 minutes)

### 7.1 Start backend
```bash
npm run start:dev
```

Watch terminal for errors. Application should start without crashes.

### 7.2 Test tasks endpoint
```bash
# Get JWT token
TOKEN=$(curl -s -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"adeel99sa@yahoo.com","password":"ReAdY4wK73967#!@"}' \
  | jq -r '.access_token')

# Test GET tasks
curl -H "Authorization: Bearer $TOKEN" http://localhost:3000/api/tasks

# Should return JSON array of tasks (may be empty)
```

### 7.3 Expected response
```json
{
  "data": [...],
  "total": 26,
  "page": 1,
  "limit": 10
}
```

If you get 401: Auth issue
If you get 404: Route not registered
If you get 500: Check backend terminal for error

## STEP 8: Test Project Delete (5 minutes)

### 8.1 Try deleting a project
```bash
# List projects first
curl -H "Authorization: Bearer $TOKEN" http://localhost:3000/api/projects

# Delete one (use actual ID from list)
curl -X DELETE -H "Authorization: Bearer $TOKEN" \
  http://localhost:3000/api/projects/[PROJECT_ID]
```

### 8.2 Expected response
```json
{
  "message": "Project deleted successfully"
}
```

If you get 500 error with "foreign key constraint" → CASCADE fixes didn't work, check database

## COMPLETION CHECKLIST

Run through this checklist:

- [ ] No duplicate task files in projects module
- [ ] npm run build succeeds with no errors
- [ ] Backend starts without crashes
- [ ] GET /api/tasks returns data
- [ ] GET /api/projects returns data
- [ ] DELETE /api/projects/[id] works
- [ ] No console errors in terminal
- [ ] Git commits created

## IF ANYTHING FAILS

**STOP IMMEDIATELY**

Report the error with:
1. Which step failed
2. Exact error message
3. Output of: `git status`
4. Output of: `npm run build`

Do not proceed to next step until current step succeeds.
